OOP (Object Oriented Programming) 객체 지향적 프로그래밍


OOP의 특성으로는 크게 세가지,
 1. 캡슐화(Encapsulation)
 2. 상속(Inheritance)
 3. 다형성(Polymorphism)
 
 					이 있다.

* 캡슐화

 캡슐화(Encapsulation)란 객체(내부)를 캡슐(외부)로 감싸 그 내부를 보호하고 이를 볼수 없게 하는것을 뜻한다.
 그 이유는 정보 은닉화(information hiding)때문이다.
 자바에서는 객체는 메소드와 필드로 구성되서, 클래스라는 캡슐로 메소드.필드의 직접적인 접근을 막고, 메소드의 구현내용도 알수 없다.
다만, 일부 메소드와 필드는 객체 외부와의 인터페이스를 위해 노출한다.

먼저, 캡슐화를 하지 않는 객체의 class를 보자.
-----------------------------------------------

public class AuthorVo {
	public long id;
	public String name;
	public String bio;
}

단순히 이렇게 작성함으로써 편하게 VO를 작성할 수 있지만, 이렇게 만든다면 아마 누군가 Author의 특성을 마음대로
바꾸어버리고 그에 따른 피해와 혼란은 엄청날 것이다.
따라서, 이를 은닉해버리고 GETTER SETTER를 통해 객체에 접근하게 함으로써 위의 문제점을 없앤다.

--------------------------------------------------------------------
public class AuthorVo {
	private long id;
	private String name;
	private String bio;
	public AuthorVo(long id, String name, String bio) {
		super();
		this.id = id;
		this.name = name;
		this.bio = bio;
	}
	public AuthorVo() {
		super();
	}
	public long getId() {
		return id;
	}
	public void setId(long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getBio() {
		return bio;
	}
	public void setBio(String bio) {
		this.bio = bio;
	}
}

이렇게 만듦으로써, 누구도 Authot 라는 객체에 직접 접근하여 데이터를 바꿀 수 없게 된다. 오로지 getter를 통해서만
데이터를 얻고, setter를 통해서만 값을 수정할 수 있게 된다.




* 상속

 상속(Inheritance)이란,상위 개체의 속성이 하위 개체에 물려져서, 하위 개체가 상위 개체의 속성을 모두 가지고 있음을 의미한다.
 이때, 상속되는 상위 개체를 자바에서는 슈퍼 클래스라 하며, 상속받는 하위개체를 서브 클래스라 한다.
상속의 역할은 이미 만들어진 클래스와 필드,메소드를 내용 그대로 물려받게 함으로써 자바 코드의 중복작성을 방지하여, 프로그램의 크기와 코드작성에 드는 시간,비용을 절감할수 있게 된다.
 
 예시)
 ================================================================
 
Person 클래스와 Student 클래스가 있는데 Student 클래스는 Person 클래스를 상속 받았기 때문에 
Person클래스는 Student클래스의 상위클래스가 되고 Student 클래스는 Person클래스의 하위 클래스가 된다.
Student 클래스는 Person클래스가 가지고 있는 메소드와 매개변수를 자신의 것 처럼 사용할 수 있습니다.

class Person {
	int age;
	public String name;
	protected int height;
	private int weight;
	public void setWeight(int weight){
		this.weight= weight;
	}
	
	public int getWeight(){
		return weight;
	}
}

class Student extends Person {
// Student 클래스가 Person 클래스를 상속받음
	void set(){
		age = 30;
		name = "홍길동";
		height = 175;
		setWeight (99);
	}
	
	public static void main(String[] args) {
		Student s = new Student(); // Student 객체 생성 
		s.set(); //Person클래스를 상속 받았기 때문에 Person클래스에 있는 매개변수를 사용할 수 있음.
		System.out.println("나이 : "+s.age+"\n이름 : "+s.name+"\n키 : "+s.height+"\n몸무게 : "+s.getWeight());
	}

}
 
 
 
 
* 다형성

다형성(Polymorphism)이란 같은 이름의 함수 호출에 대하여 각 객체에 따라 다른 동작을 할수 있도록 구성하는 것을 말한다.
다형성의 예를 실생활에서 찾아보면, 약국에서 파는 약은 두통약,감기약등은 모두 같은 '약'이지만 그 효능은 모두 다르다.
다형성은 오버로딩,오버라이딩과 밀접한 관계가 있다. 

개념에 대한 예시)
=========================================================
class B extends A
위와같은 상속 관계에 있는 클래스가 존재하는 경우,

A a1 = new A(); //ok
A a2 = new B(); //ok, 묵시적 형변환(업캐스팅)
자바의 다형성에 의해 부모의 참조변수로 자식 클래스의 객체를 참조할 수 있다.


B b1 = new B(); //ok
B b2 = a2; //컴파일 에러(형변환 에러)
조상의 참조변수를 자식의 참조변수에 담을 경우에는 명시적인 형변환을 해야한다.

B b3 = (B)a2; //ok
명시적인 형변환을 통해 조상의 참조변수에 담긴 주소를 자식의 참조변수에 담을 수 있다.

B b4 = (B)a1; //런타임 에러(형변환 에러)
하지만, 위와같이 명시적인 형변환을 하였지만, 자식의 참조변수 b4로는 조상 객체의 참조주소를 참조를 할 수 없다.


a1과 a2 참조변수는 클래스 형이 동일하지만, 

a1의 참조변수는 A객체의 주소를 담고 있었고,
a2의 참조변수는 B객체의 주소를 담고 있었음.

자바에서는 조상의 참조변수로는 조상과 자식의 객체를 참조할 수 있지만,
자식의 참조변수로는 자식의 객체만을 참조할 수 있기 때문에,
자식의 참조변수로 조상의 객체에 접근할 수가 없다.

따라서, a1의 참조변수에는 실질적으로 조상의 A객체의 주소가 담겨있기때문에, 자식인 B 클래스 변수에는 A클래스 참조변수를 저장할 수없다.

=====================================================================
실전예시)
=====================================================================
class Employee {
    String name, id;
    public Employee(String name, String id) {
        this.name = name;    
  this.id = id;
    }
    public void gotoOffice() {
        System.out.println(name+"님 출근하였습니다...");
    }
    public void gotoHome() {
        System.out.println(name+"님 퇴근하였습니다...");
    }
 public void startJob() {}
}
 
 
 
class Programmer extends Employee {   
 //기술자 등급 1, 2, 3, 4
 private int techGrade;
    public Programmer(String newName,String newID, int newTechGrade) {
        super(newName, newID);
  this.techGrade = newTechGrade;
    }
    public void startJob() {
        System.out.println(super.name + " 님이 S/W개발업무를 시작합니다.");  
    }
 public void dispGrade() {
  System.out.println(super.name + " 님의 기술자 등급은 " + techGrade + " 입니다.");
 }
}
 
class ProgrammerChief extends Programmer {
      private String part;  //업무파트
       public ProgrammerChief(String newName,String newID, int newTechGrade, String newPart) {
           super(newName, newID, newTechGrade);  
           this.part = newPart;
       }
      //영업팀장의 업무는 더이상 확장이 안된다는 의미, 상속안된다는 의미
   //Programmer Class의 메소드 재정의
       final public void startJob() {
           System.out.println(super.name + "님이 프로그램 개발팀 직원을 관리합니다.");
       }
    public void dispPart() {
     System.out.println(super.name + " 님이 맡고 있는 파트는 " + this.part + " 입니다.");
    }
}
 
class Designer extends Employee {    
 private String majorTech; //주 사용기술
    public Designer(String newName,String newID, String newMajorTech) {
        super(newName, newID);
  this.majorTech = newMajorTech;
    }
    public void startJob() {
        System.out.println(super.name + " 님이 디자인 업무를 시작 합니다.");
    }
 public void dispMajorTech() {
  System.out.println(super.name + " 님의 주 사용기술은 " + majorTech + " 입니다.");
 }
}
 

class Main {
    public static void main(String args[]) {           
                //p1, d1, pc1 같은 Employee Type의 startJob이지만 다른 결과를 나타내죠
                //이게 다형성 입니다.
  Employee p1 = new Programmer("안철수","12346",3);
  Employee d1 = new Designer("안정환","23256","플래쉬");
  Employee pc1 = new ProgrammerChief("홍길동","12335",1, "윈도우개발");
  p1.startJob();
  d1.startJob();
  pc1.startJob();
    }
}
 
